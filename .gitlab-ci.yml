stages:
  - build
  - test
  - publish

#--------------------------
# Build templates
#--------------------------

.build-template: &build-template_definition
  stage: build
  script:
    - ci/fedora-packages.sh
    - ci/common-rpm-build.sh
    - mkdir ${CI_JOB_NAME}
    - cp -rv build/RPMS build/SRPMS ${CI_JOB_NAME}
    - tree ${CI_JOB_NAME}
  variables:
    BRANCH: ${CI_COMMIT_REF_NAME}
  artifacts:
    paths:
      - "$CI_JOB_NAME"

#--------------------------
# Build jobs
#--------------------------

alma8:
  image: gitlab-registry.cern.ch/linuxsupport/alma8-base
  <<: *build-template_definition

alma9:
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  <<: *build-template_definition

alma10:
  image: gitlab-registry.cern.ch/linuxsupport/alma10-base
  <<: *build-template_definition

fedora-41:
  image: registry.cern.ch/docker.io/library/fedora:41
  <<: *build-template_definition

fedora-rawhide:
  image: registry.cern.ch/docker.io/library/fedora:rawhide
  <<: *build-template_definition
  allow_failure: true
  when: manual

pypi:
  stage: build
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  when: manual
  allow_failure: true
  script:
    - dnf install -y epel-release
    - dnf install -y tree python3 python3-wheel python3-pypandoc
    - python3 setup.py sdist
    - cp -rv dist/ ${CI_JOB_NAME}
    - tree ${CI_JOB_NAME}
  artifacts:
    paths:
      - "$CI_JOB_NAME"

#--------------------------
# Test templates
#--------------------------

.test-template: &test-template_definition
  stage: test
  script:
    - dnf install -y git
    - PLATFORM=${CI_JOB_NAME%-*}
    - ci/write-repo-file.sh
    - dnf install -y ${PLATFORM}/RPMS/*/*.rpm
    - shopt -s expand_aliases
    - python --version &>/dev/null || alias python=python3
    - python test/unit/creat_instance_all.py
  variables:
    BRANCH: ${CI_COMMIT_REF_NAME}

#--------------------------
# Test jobs
#--------------------------

alma8-test:
  image: gitlab-registry.cern.ch/linuxsupport/alma8-base
  needs:
    - job: alma8
  before_script:
    - dnf install -y epel-release
  <<: *test-template_definition

alma9-test:
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  needs:
    - job: alma9
  before_script:
    - dnf install -y epel-release
  <<: *test-template_definition

alma10-test:
  image: gitlab-registry.cern.ch/linuxsupport/alma10-base
  needs:
    - job: alma10
  before_script:
    - dnf install -y epel-release
  <<: *test-template_definition

fedora-41-test:
  image: registry.cern.ch/docker.io/library/fedora:41
  needs:
    - job: fedora-41
  <<: *test-template_definition

#--------------------------
# Publish templates
#--------------------------

.publish-template: &publish-template_definition
  stage: publish
  image: gitlab-registry.cern.ch/eos/gitlab-eos/alma9:latest
  dependencies:
    - alma8
    - alma9
    - alma10
    - fedora-41
    - fedora-rawhide
  script:
    - automount
    - cat "$repo_passwd" | kinit "$repo_user"
    - |
        for platform in alma8 alma9 alma10 fedora-41 fedora-rawhide; do
          if [[ "${platform}" == "fedora-rawhide" ]] && [[ ! -d ${platform} ]] ; then
            echo "Skipping ${platform} packages..." ;
            continue ;
          fi
          packaging/gfal2-repo-manager.py --action add --base /eos/project-d/dmc/www/repos/ --ref ${CI_COMMIT_REF_NAME} --packages ${platform}/RPMS/*/*.rpm ${platform}/SRPMS/*
        done
  tags:
    - docker-privileged-xl
  retry: 2

#--------------------------
# Publish jobs
#--------------------------

rpms:
  <<: *publish-template_definition
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "dmc"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "develop" || $CI_COMMIT_TAG != null'
    - if: '$CI_COMMIT_REF_NAME != "develop" && $CI_COMMIT_TAG == null'
      when: manual

pypi-publish:
  needs:
    - job: pypi
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/alma9-base
  script:
    - PLATFORM=${CI_JOB_NAME%-*}
    - dnf install -y git python3 python3-pip
    - python3 -m pip install --upgrade pip
    - python3 -m pip install setuptools twine
    - echo -e "[pypi]\nusername = __token__\npassword = ${PYPI_API_KEY}" > ~/.pypirc
    - twine check ${PLATFORM}/*
    - twine upload ${PLATFORM}/* --verbose
  rules:
    - if: '$CI_COMMIT_TAG != null'
      when: manual
    - when: never
